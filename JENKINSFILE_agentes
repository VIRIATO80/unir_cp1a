pipeline {
    agent any
    stages {
        stage('Get Code') {
            agent { label 'master' }
            steps {
                // Obtener cÃ³digo del repo
                git 'https://github.com/VIRIATO80/unir_cp1a.git'
                stash name: 'code', includes: '**/*'
                echo WORKSPACE
            }
        }
        stage('Tests') {
            parallel {
                stage('Static') {
                    agent { label 'testing' }
                    steps {
                        unstash 'code'
                        bat '''
                            flake8 --exit-zero --format=pylint app > flake8.out
                        '''
                        recordIssues tools: 
                            [flake8(name: 'Flake8', pattern: 'flake8.out')],
                            qualityGates: [
                                [threshold: 10, type: 'TOTAL', unstable: true], 
                                [threshold: 12, type: 'TOTAL', unstable: false]
                            ]
                        bat 'dir'
                        stash name: 'build_result', includes: '**/*'
                        echo 'HOSTNAME: ' + bat(script: 'hostname', returnStatus: true)
                        echo 'WHOAMI: ' + bat(script: 'whoami', returnStatus: true)
                        echo WORKSPACE                
                    }
                }                
                
                stage('Unit Tests') {
                    agent { label 'python3' }
                    steps {
                        unstash 'code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat 'set PYTHONPATH=%WORKSPACE% && pytest --junitxml=result-unit.xml test\\unit'
                            junit 'result*.xml'
                        }
                        echo 'HOSTNAME: ' + bat(script: 'hostname', returnStatus: true)
                        echo 'WHOAMI: ' + bat(script: 'whoami', returnStatus: true)
                        echo WORKSPACE
                    }
                }
                stage('Cobertura') {
                    agent { label 'python3' }
                    steps {
                        unstash 'code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                                coverage xml
                            '''
                            cobertura coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100,83,80', lineCoverageTargets: '95,90,95', failUnstable: false
                        }
                        echo 'HOSTNAME: ' + bat(script: 'hostname', returnStatus: true)
                        echo 'WHOAMI: ' + bat(script: 'whoami', returnStatus: true)
                        echo WORKSPACE
                    }
                }
                stage('Security') {
                    agent { label 'testing' }
                    steps {
                        unstash 'code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                bandit --exit-zero -r . -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id} {msg}]"
                            '''
                            recordIssues tools:
                                [
                                pyLint(name: 'Bandit', pattern: 'bandit.out')],
                                qualityGates: [
                                    [threshold: 1, type: 'TOTAL', unstable: true], 
                                    [threshold: 2, type: 'TOTAL', unstable: false]
                                ]
                        }
                        echo 'HOSTNAME: ' + bat(script: 'hostname', returnStatus: true)
                        echo 'WHOAMI: ' + bat(script: 'whoami', returnStatus: true)
                        echo WORKSPACE
                    }
                }                  
                stage('Performance') {
                    agent { label 'flask' }
                    steps {
                        unstash 'code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                                set FLASK_APP=app\\api.py
                                set FLASK_ENV=development
                                start flask run
                                C:\\apache-jmeter-5.5\\bin\\jmeter -n -t test\\jmeter\\flask.jmx -f -l flask.jlt
                            '''
                        }
                        perfReport sourceDataFiles: 'flask.jlt'
                        echo 'HOSTNAME: ' + bat(script: 'hostname', returnStatus: true)
                        echo 'WHOAMI: ' + bat(script: 'whoami', returnStatus: true)
                        echo WORKSPACE
                    }
                }
            }
        }

    }
}
